{"version":3,"file":"button-radio.directive.d.ts","sources":["button-radio.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnInit, Provider, Renderer2 } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\nexport declare const RADIO_CONTROL_VALUE_ACCESSOR: Provider;\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\nexport declare class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n    private el;\r\n    private cdr;\r\n    private renderer;\r\n    private group;\r\n    onChange: Function;\r\n    onTouched: Function;\r\n    /** Radio button value, will be set to `ngModel` */\r\n    btnRadio: string;\r\n    /** If `true` — radio button can be unchecked */\r\n    uncheckable: boolean;\r\n    /** Current value of radio component or group */\r\n    get value(): null | string;\r\n    set value(value: null | string);\r\n    /** If `true` — radio button is disabled */\r\n    get disabled(): boolean;\r\n    set disabled(disabled: boolean);\r\n    get controlOrGroupDisabled(): boolean;\r\n    get hasDisabledClass(): boolean;\r\n    get isActive(): boolean;\r\n    readonly role: string;\r\n    get tabindex(): undefined | number;\r\n    get hasFocus(): boolean;\r\n    private _value;\r\n    private _disabled;\r\n    private _hasFocus;\r\n    constructor(el: ElementRef, cdr: ChangeDetectorRef, renderer: Renderer2, group: ButtonRadioGroupDirective);\r\n    toggleIfAllowed(): void;\r\n    onSpacePressed(event: KeyboardEvent): void;\r\n    focus(): void;\r\n    onFocus(): void;\r\n    onBlur(): void;\r\n    canToggle(): boolean;\r\n    ngOnInit(): void;\r\n    _onChange(value: string): void;\r\n    writeValue(value: string): void;\r\n    registerOnChange(fn: () => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    setDisabledState(disabled: boolean): void;\r\n}\r\n"]}